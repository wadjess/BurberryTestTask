# swagger: "2.0"
openapi: 3.0.0
info:
  description: "Please send POST /auth request to get the token (username: \"burberrydev\", password: \"burberrydev\"). Then press Authorise button and enter the received token to have access to secured /products and /reviews routes."
  version: "1.0.0"
  title: "Burberry test"
servers:
- url: 'http://localhost:2727'
# components
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # optional, for documentation purposes only
# tags
tags:
- name: "auth"
  description: "User authorization"
- name: "products"
  description: "Access to products"
- name: "reviews"
  description: "Access to reviews"
#paths
paths:
  # auth
  /auth:
      # POST /auth
    post:
      tags:
      - "auth"
      summary: "Sign in"
      description: "Returns token if the specified credentials are correct.  a new product with spesified data. Test creds are username: burberrydev, password: burberrydev"
      operationId: "postAuth"
      produces:
      - "application/json"
      requestBody:
        description: "User credentials"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/User'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Auth successful"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImJ1cmJlcnJ5ZGV2IiwiX2lkIjoiNWRlMGUxYTExYzlkNDQwMDAwMjEwMzZhIiwiaWF0IjoxNTc1NjI0MTk2fQ.DY-s3t2ITMiZtgur3D3RmNGVvZrsOZRw2Lg3OXkoueQ"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
  # products
  /products:
    # GET /products
    get:
      tags:
      - "products"
      summary: "Get all reviews"
      description: "Returns products list. Authorization is required."
      operationId: "getAllProducts"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "1 product has been fetched"
                  data:
                    type: array
                    xml:
                      name: "review"
                      wrapped: true
                    items: 
                      $ref: "#/definitions/ProductRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
    # POST /products
    post:
      tags:
      - "products"
      summary: "Create a product"
      description: "Create a new product with spesified data. Authorization is required."
      operationId: "postProduct"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      requestBody:
        description: "A new product data"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/ProductReq'
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product has been created successfully"
                  data:
                    $ref: "#/definitions/ProductRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
  /products/{productId}:
    # /GET/:productId
    get:
      tags:
      - "products"
      summary: "Get a product by id"
      description: "Returns product information by id. Authorization is required."
      operationId: "getProductById"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      parameters:
        - in: path
          name: productId
          description: Hash ID of the product
          schema:
            type: string
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product has been fetched successfully"
                  data:
                    $ref: "#/definitions/ProductRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
    # PATCH /products/:productID
    patch:
      tags:
      - "products"
      summary: "Update product"
      description: "Update product information with spesified data. Authorization is required.
        Please note that old not updated product is returned in response by default."
      operationId: "patchProduct"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: productId
        description: Hash ID of the product
        schema:
          type: string
          required: true
      requestBody:
        description: "Data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/ProductReq'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product has been updated successfully"
                  data:
                    $ref: "#/definitions/ProductRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
    # DELETE /products/:productID
    delete:
      tags:
      - "products"
      summary: "Delete product"
      description: "Delete product. Authorization is required"
      operationId: "deleteProduct"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: productId
        description: Hash ID of the product
        schema:
          type: string
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product has been deleted successfully"
                  data:
                    $ref: "#/definitions/DeleteOperationResult"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
  /products/{productId}/reviews:
    # /GET/:productId/reviews
    get:
      tags:
      - "products"
      summary: "Get all reviews of product"
      description: "Returns the list of product reviews. Authorization is required."
      operationId: "getProductReviewsById"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      parameters:
        - in: path
          name: productId
          description: Hash ID of the product
          schema:
            type: string
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product reviews have been fetched successfully"
                  data:
                    tyoe: array
                    items:
                    $ref: "#/definitions/ReviewRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
  # reviews
  /reviews:
    # GET /reviews
    get:
      tags:
      - "reviews"
      summary: "Get all reviews"
      description: "Returns reviews list. Authorization is required."
      operationId: "getAllReviews"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "1 record has been retrieved"
                  data:
                    type: array
                    xml:
                      name: "review"
                      wrapped: true
                    items: 
                      $ref: "#/definitions/ReviewRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
    # POST /reviews
    post:
      tags:
      - "reviews"
      summary: "Create a review"
      description: "Create a new review with spesified data. Authorization is required."
      operationId: "postReview"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      requestBody:
        description: "A new review data"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/ReviewReq'
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review has been stored successfully"
                  data:
                    $ref: "#/definitions/ReviewRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
  /reviews/{reviewId}:
    # /GET/:reviewId
    get:
      tags:
      - "reviews"
      summary: "Get a review by id"
      description: "Returns review information by id. Authorization is required."
      operationId: "getReviewById"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      parameters:
        - in: path
          name: reviewId
          description: Hash ID of the review
          schema:
            type: string
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review has been fetched successfully"
                  data:
                    $ref: "#/definitions/ReviewRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
    # PATCH /reviews/:reviewID
    patch:
      tags:
      - "reviews"
      summary: "Update review"
      description: "Update review information with spesified data. Authorization is required.
        Please note that old not updated review is returned in response by default."
      operationId: "patchReview"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: reviewId
        description: Hash ID of the review
        schema:
          type: string
          required: true
      requestBody:
        description: "Data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/ReviewReq'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review has been updated successfully"
                  data:
                    $ref: "#/definitions/ReviewRes"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
    # DELETE /reviews/:reviewID
    delete:
      tags:
      - "reviews"
      summary: "Delete review"
      description: "Delete review. Authorization is required"
      operationId: "deleteReview"
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: reviewId
        description: Hash ID of the review
        schema:
          type: string
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review has been deleted successfully"
                  data:
                    $ref: "#/definitions/DeleteOperationResult"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        401:
          description: "Authorization failed"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
        500:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
definitions:
  User:
    type: object
    properties:
      username:
        type: string
        example: "burberrydev"
      password:
        type: string
        example: "burberrydev"
  DeleteOperationResult:
    type: object
    properties:
      deleteProductResult:
        type: object
      deleteReviewsResult:
        type: object
  Error:
    type: object
    properties:
      error:
        type: object
        properties:
          message:
            type: string
            example: "Error details"
  ProductReq:
    type: object
    properties:
      name:
        type: string
        example: "Burberry trench coat"
      price:
        type: number
        format: double
        example: 1999.99
      options:
        type: array
        xml:
          name: "option"
          wrapped: true
        items:
          option: object
          example: [
            color: "beige",
            size: "S"
          ]
  ProductRes:
    allOf:
      - type: object
        properties:
          _id:
            type: string
            example: "5dea266a445baa55ec841931"
      - $ref: '#/definitions/ProductReq'
  ReviewReq:
    type: object
    properties:
      author:
        type: string
        example: "Nina Dobrev"
      date:
        type: string
        example: "2019-07-17"
      text:
        type: string
        example: "My favourite item so far"
      iProduct:
        type: string
        example: "5dea266a445baa55ec841931"
  ReviewRes:
    allOf:
      - type: object
        properties:
          _id:
            type: string
            example: "5de5525c585ce813fecc2e51"
      - $ref: '#/definitions/ReviewReq'